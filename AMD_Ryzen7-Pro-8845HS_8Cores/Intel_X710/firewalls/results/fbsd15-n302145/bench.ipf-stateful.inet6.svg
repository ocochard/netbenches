<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="342.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="325" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="325" > </text>
<g id="frames">
<g >
<title>netisr_dispatch_src (3,130 samples, 16.61%)</title><rect x="925.8" y="149" width="196.0" height="15.0" fill="rgb(217,155,50)" rx="2" ry="2" />
<text  x="928.80" y="159.5" >netisr_dispatch_src</text>
</g>
<g >
<title>__mtx_lock_sleep (16 samples, 0.08%)</title><rect x="925.8" y="53" width="1.0" height="15.0" fill="rgb(241,18,22)" rx="2" ry="2" />
<text  x="928.80" y="63.5" ></text>
</g>
<g >
<title>ether_input (10,451 samples, 55.45%)</title><rect x="10.1" y="197" width="654.3" height="15.0" fill="rgb(249,194,27)" rx="2" ry="2" />
<text  x="13.06" y="207.5" >ether_input</text>
</g>
<g >
<title>lock_delay (738 samples, 3.92%)</title><rect x="616.8" y="37" width="46.2" height="15.0" fill="rgb(249,113,40)" rx="2" ry="2" />
<text  x="619.84" y="47.5" >lock..</text>
</g>
<g >
<title>cache_alloc_retry (10 samples, 0.05%)</title><rect x="664.4" y="181" width="0.6" height="15.0" fill="rgb(245,29,18)" rx="2" ry="2" />
<text  x="667.36" y="191.5" ></text>
</g>
<g >
<title>ipf_makefrip (11 samples, 0.06%)</title><rect x="696.8" y="69" width="0.7" height="15.0" fill="rgb(223,182,43)" rx="2" ry="2" />
<text  x="699.79" y="79.5" ></text>
</g>
<g >
<title>memset_erms (31 samples, 0.16%)</title><rect x="698.2" y="53" width="1.9" height="15.0" fill="rgb(235,54,52)" rx="2" ry="2" />
<text  x="701.17" y="63.5" ></text>
</g>
<g >
<title>ether_demux (1,090 samples, 5.78%)</title><rect x="1121.8" y="213" width="68.2" height="15.0" fill="rgb(227,192,7)" rx="2" ry="2" />
<text  x="1124.76" y="223.5" >ether_d..</text>
</g>
<g >
<title>iflib_rxeof (10,461 samples, 55.50%)</title><rect x="10.1" y="213" width="654.9" height="15.0" fill="rgb(219,189,6)" rx="2" ry="2" />
<text  x="13.06" y="223.5" >iflib_rxeof</text>
</g>
<g >
<title>netisr_dispatch_src (3,130 samples, 16.61%)</title><rect x="925.8" y="197" width="196.0" height="15.0" fill="rgb(241,167,2)" rx="2" ry="2" />
<text  x="928.80" y="207.5" >netisr_dispatch_src</text>
</g>
<g >
<title>ipf_state_check (93 samples, 0.49%)</title><rect x="335.9" y="37" width="5.8" height="15.0" fill="rgb(208,7,1)" rx="2" ry="2" />
<text  x="338.86" y="47.5" ></text>
</g>
<g >
<title>lock_delay (21 samples, 0.11%)</title><rect x="695.5" y="37" width="1.3" height="15.0" fill="rgb(252,224,28)" rx="2" ry="2" />
<text  x="698.47" y="47.5" ></text>
</g>
<g >
<title>keg_fetch_free_slab (2 samples, 0.01%)</title><rect x="664.8" y="85" width="0.1" height="15.0" fill="rgb(225,143,12)" rx="2" ry="2" />
<text  x="667.80" y="95.5" ></text>
</g>
<g >
<title>zone_alloc_item (2 samples, 0.01%)</title><rect x="664.8" y="117" width="0.1" height="15.0" fill="rgb(211,179,43)" rx="2" ry="2" />
<text  x="667.80" y="127.5" ></text>
</g>
<g >
<title>lock_delay (7 samples, 0.04%)</title><rect x="697.5" y="37" width="0.4" height="15.0" fill="rgb(232,199,5)" rx="2" ry="2" />
<text  x="700.48" y="47.5" ></text>
</g>
<g >
<title>ipf_check_wrapper6 (4,720 samples, 25.04%)</title><rect x="368.2" y="69" width="295.5" height="15.0" fill="rgb(241,117,48)" rx="2" ry="2" />
<text  x="371.17" y="79.5" >ipf_check_wrapper6</text>
</g>
<g >
<title>ip6_tryforward (4,165 samples, 22.10%)</title><rect x="665.0" y="133" width="260.8" height="15.0" fill="rgb(217,174,18)" rx="2" ry="2" />
<text  x="668.05" y="143.5" >ip6_tryforward</text>
</g>
<g >
<title>ether_nh_input (1,090 samples, 5.78%)</title><rect x="1121.8" y="229" width="68.2" height="15.0" fill="rgb(209,106,45)" rx="2" ry="2" />
<text  x="1124.76" y="239.5" >ether_n..</text>
</g>
<g >
<title>_rw_runlock_cookie_int (514 samples, 2.73%)</title><rect x="493.7" y="37" width="32.2" height="15.0" fill="rgb(212,37,54)" rx="2" ry="2" />
<text  x="496.69" y="47.5" >_r..</text>
</g>
<g >
<title>ipf_scanlist (540 samples, 2.87%)</title><rect x="1003.1" y="53" width="33.8" height="15.0" fill="rgb(241,105,50)" rx="2" ry="2" />
<text  x="1006.06" y="63.5" >ip..</text>
</g>
<g >
<title>ipf_check_wrapper6 (3,679 samples, 19.52%)</title><rect x="695.5" y="101" width="230.3" height="15.0" fill="rgb(238,207,14)" rx="2" ry="2" />
<text  x="698.47" y="111.5" >ipf_check_wrapper6</text>
</g>
<g >
<title>ipf_check_wrapper6 (486 samples, 2.58%)</title><rect x="665.0" y="101" width="30.5" height="15.0" fill="rgb(251,83,14)" rx="2" ry="2" />
<text  x="668.05" y="111.5" >ip..</text>
</g>
<g >
<title>ether_output_frame (1,090 samples, 5.78%)</title><rect x="1121.8" y="133" width="68.2" height="15.0" fill="rgb(232,103,53)" rx="2" ry="2" />
<text  x="1124.76" y="143.5" >ether_o..</text>
</g>
<g >
<title>ether_nh_input (4,165 samples, 22.10%)</title><rect x="665.0" y="197" width="260.8" height="15.0" fill="rgb(209,142,31)" rx="2" ry="2" />
<text  x="668.05" y="207.5" >ether_nh_input</text>
</g>
<g >
<title>gtaskqueue_thread_loop (10,461 samples, 55.50%)</title><rect x="10.1" y="261" width="654.9" height="15.0" fill="rgb(246,143,23)" rx="2" ry="2" />
<text  x="13.06" y="271.5" >gtaskqueue_thread_loop</text>
</g>
<g >
<title>ether_input (4,165 samples, 22.10%)</title><rect x="665.0" y="229" width="260.8" height="15.0" fill="rgb(232,176,14)" rx="2" ry="2" />
<text  x="668.05" y="239.5" >ether_input</text>
</g>
<g >
<title>pfil_mbuf_out (4,720 samples, 25.04%)</title><rect x="368.2" y="85" width="295.5" height="15.0" fill="rgb(236,82,36)" rx="2" ry="2" />
<text  x="371.17" y="95.5" >pfil_mbuf_out</text>
</g>
<g >
<title>lock_delay (4 samples, 0.02%)</title><rect x="697.9" y="37" width="0.3" height="15.0" fill="rgb(208,137,21)" rx="2" ry="2" />
<text  x="700.92" y="47.5" ></text>
</g>
<g >
<title>__mtx_lock_sleep (21 samples, 0.11%)</title><rect x="695.5" y="53" width="1.3" height="15.0" fill="rgb(248,125,29)" rx="2" ry="2" />
<text  x="698.47" y="63.5" ></text>
</g>
<g >
<title>_task_fn_rx (10,461 samples, 55.50%)</title><rect x="10.1" y="229" width="654.9" height="15.0" fill="rgb(211,35,40)" rx="2" ry="2" />
<text  x="13.06" y="239.5" >_task_fn_rx</text>
</g>
<g >
<title>__mtx_lock_sleep (206 samples, 1.09%)</title><rect x="1003.1" y="37" width="12.9" height="15.0" fill="rgb(254,226,2)" rx="2" ry="2" />
<text  x="1006.06" y="47.5" ></text>
</g>
<g >
<title>ipf_derefrule (1,218 samples, 6.46%)</title><rect x="926.8" y="53" width="76.3" height="15.0" fill="rgb(251,220,10)" rx="2" ry="2" />
<text  x="929.80" y="63.5" >ipf_dere..</text>
</g>
<g >
<title>memcmp (506 samples, 2.68%)</title><rect x="1037.2" y="37" width="31.7" height="15.0" fill="rgb(253,209,9)" rx="2" ry="2" />
<text  x="1040.18" y="47.5" >me..</text>
</g>
<g >
<title>in6_lltable_lookup (2 samples, 0.01%)</title><rect x="145.5" y="53" width="0.2" height="15.0" fill="rgb(240,93,1)" rx="2" ry="2" />
<text  x="148.54" y="63.5" ></text>
</g>
<g >
<title>ipf_state_insert (4 samples, 0.02%)</title><rect x="697.9" y="53" width="0.3" height="15.0" fill="rgb(214,9,14)" rx="2" ry="2" />
<text  x="700.92" y="63.5" ></text>
</g>
<g >
<title>drain_ring_lockless (1,090 samples, 5.78%)</title><rect x="1121.8" y="85" width="68.2" height="15.0" fill="rgb(239,62,27)" rx="2" ry="2" />
<text  x="1124.76" y="95.5" >drain_r..</text>
</g>
<g >
<title>ipf_state_check (380 samples, 2.02%)</title><rect x="593.1" y="37" width="23.7" height="15.0" fill="rgb(221,205,6)" rx="2" ry="2" />
<text  x="596.05" y="47.5" >i..</text>
</g>
<g >
<title>__rw_rlock_int (570 samples, 3.02%)</title><rect x="243.7" y="37" width="35.7" height="15.0" fill="rgb(252,133,39)" rx="2" ry="2" />
<text  x="246.71" y="47.5" >__r..</text>
</g>
<g >
<title>ether_nh_input (10,451 samples, 55.45%)</title><rect x="10.1" y="165" width="654.3" height="15.0" fill="rgb(223,94,18)" rx="2" ry="2" />
<text  x="13.06" y="175.5" >ether_nh_input</text>
</g>
<g >
<title>zone_import (2 samples, 0.01%)</title><rect x="664.8" y="101" width="0.1" height="15.0" fill="rgb(243,160,47)" rx="2" ry="2" />
<text  x="667.80" y="111.5" ></text>
</g>
<g >
<title>pfil_mbuf_out (3,130 samples, 16.61%)</title><rect x="925.8" y="101" width="196.0" height="15.0" fill="rgb(245,226,43)" rx="2" ry="2" />
<text  x="928.80" y="111.5" >pfil_mbuf_out</text>
</g>
<g >
<title>_rw_runlock_cookie_int (690 samples, 3.66%)</title><rect x="279.4" y="37" width="43.2" height="15.0" fill="rgb(228,61,11)" rx="2" ry="2" />
<text  x="282.39" y="47.5" >_rw_..</text>
</g>
<g >
<title>iflib_txq_drain (1,090 samples, 5.78%)</title><rect x="1121.8" y="69" width="68.2" height="15.0" fill="rgb(222,157,30)" rx="2" ry="2" />
<text  x="1124.76" y="79.5" >iflib_t..</text>
</g>
<g >
<title>fork_exit (10,462 samples, 55.51%)</title><rect x="10.1" y="277" width="654.9" height="15.0" fill="rgb(221,143,1)" rx="2" ry="2" />
<text  x="13.06" y="287.5" >fork_exit</text>
</g>
<g >
<title>ipf_check (4,720 samples, 25.04%)</title><rect x="368.2" y="53" width="295.5" height="15.0" fill="rgb(207,132,6)" rx="2" ry="2" />
<text  x="371.17" y="63.5" >ipf_check</text>
</g>
<g >
<title>ipf_checkv6sum (11 samples, 0.06%)</title><rect x="696.8" y="53" width="0.7" height="15.0" fill="rgb(238,181,6)" rx="2" ry="2" />
<text  x="699.79" y="63.5" ></text>
</g>
<g >
<title>ipf_checkl4sum (11 samples, 0.06%)</title><rect x="696.8" y="37" width="0.7" height="15.0" fill="rgb(243,81,31)" rx="2" ry="2" />
<text  x="699.79" y="47.5" ></text>
</g>
<g >
<title>memcmp (6 samples, 0.03%)</title><rect x="145.7" y="85" width="0.3" height="15.0" fill="rgb(217,12,44)" rx="2" ry="2" />
<text  x="148.67" y="95.5" ></text>
</g>
<g >
<title>iflib_rxeof (4,165 samples, 22.10%)</title><rect x="665.0" y="245" width="260.8" height="15.0" fill="rgb(254,15,28)" rx="2" ry="2" />
<text  x="668.05" y="255.5" >iflib_rxeof</text>
</g>
<g >
<title>__mtx_lock_sleep (7 samples, 0.04%)</title><rect x="697.5" y="53" width="0.4" height="15.0" fill="rgb(214,110,12)" rx="2" ry="2" />
<text  x="700.48" y="63.5" ></text>
</g>
<g >
<title>ether_demux (3,130 samples, 16.61%)</title><rect x="925.8" y="165" width="196.0" height="15.0" fill="rgb(228,11,36)" rx="2" ry="2" />
<text  x="928.80" y="175.5" >ether_demux</text>
</g>
<g >
<title>ipf_scanlist (7 samples, 0.04%)</title><rect x="697.5" y="69" width="0.4" height="15.0" fill="rgb(229,192,51)" rx="2" ry="2" />
<text  x="700.48" y="79.5" ></text>
</g>
<g >
<title>netisr_dispatch_src (1,090 samples, 5.78%)</title><rect x="1121.8" y="197" width="68.2" height="15.0" fill="rgb(236,10,28)" rx="2" ry="2" />
<text  x="1124.76" y="207.5" >netisr_..</text>
</g>
<g >
<title>ipf_check (3,548 samples, 18.82%)</title><rect x="146.0" y="53" width="222.2" height="15.0" fill="rgb(239,193,34)" rx="2" ry="2" />
<text  x="149.04" y="63.5" >ipf_check</text>
</g>
<g >
<title>__mtx_lock_sleep (450 samples, 2.39%)</title><rect x="926.8" y="37" width="28.2" height="15.0" fill="rgb(225,65,35)" rx="2" ry="2" />
<text  x="929.80" y="47.5" >_..</text>
</g>
<g >
<title>netisr_dispatch_src (10,451 samples, 55.45%)</title><rect x="10.1" y="181" width="654.3" height="15.0" fill="rgb(237,140,43)" rx="2" ry="2" />
<text  x="13.06" y="191.5" >netisr_dispatch_src</text>
</g>
<g >
<title>ether_nh_input (3,130 samples, 16.61%)</title><rect x="925.8" y="181" width="196.0" height="15.0" fill="rgb(240,61,4)" rx="2" ry="2" />
<text  x="928.80" y="191.5" >ether_nh_input</text>
</g>
<g >
<title>ipf_makefrip (486 samples, 2.58%)</title><rect x="665.0" y="69" width="30.5" height="15.0" fill="rgb(210,131,42)" rx="2" ry="2" />
<text  x="668.05" y="79.5" >ip..</text>
</g>
<g >
<title>memcmp (2 samples, 0.01%)</title><rect x="145.5" y="37" width="0.2" height="15.0" fill="rgb(206,39,39)" rx="2" ry="2" />
<text  x="148.54" y="47.5" ></text>
</g>
<g >
<title>gtaskqueue_run_locked (3,130 samples, 16.61%)</title><rect x="925.8" y="261" width="196.0" height="15.0" fill="rgb(207,62,22)" rx="2" ry="2" />
<text  x="928.80" y="271.5" >gtaskqueue_run_locked</text>
</g>
<g >
<title>ip6_input (4,165 samples, 22.10%)</title><rect x="665.0" y="149" width="260.8" height="15.0" fill="rgb(215,170,0)" rx="2" ry="2" />
<text  x="668.05" y="159.5" >ip6_input</text>
</g>
<g >
<title>ipf_state_add (511 samples, 2.71%)</title><rect x="1036.9" y="53" width="32.0" height="15.0" fill="rgb(228,202,44)" rx="2" ry="2" />
<text  x="1039.87" y="63.5" >ip..</text>
</g>
<g >
<title>_task_fn_rx (3,130 samples, 16.61%)</title><rect x="925.8" y="245" width="196.0" height="15.0" fill="rgb(223,165,27)" rx="2" ry="2" />
<text  x="928.80" y="255.5" >_task_fn_rx</text>
</g>
<g >
<title>all (18,848 samples, 100%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(247,50,37)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>pfil_mbuf_in (486 samples, 2.58%)</title><rect x="665.0" y="117" width="30.5" height="15.0" fill="rgb(224,35,24)" rx="2" ry="2" />
<text  x="668.05" y="127.5" >pf..</text>
</g>
<g >
<title>__mtx_lock_sleep (430 samples, 2.28%)</title><rect x="443.4" y="37" width="26.9" height="15.0" fill="rgb(222,99,39)" rx="2" ry="2" />
<text  x="446.36" y="47.5" >_..</text>
</g>
<g >
<title>ipf_state_lookup (3,605 samples, 19.13%)</title><rect x="700.1" y="53" width="225.7" height="15.0" fill="rgb(244,152,49)" rx="2" ry="2" />
<text  x="703.11" y="63.5" >ipf_state_lookup</text>
</g>
<g >
<title>ipf_makefrip (212 samples, 1.12%)</title><rect x="322.6" y="37" width="13.3" height="15.0" fill="rgb(215,114,24)" rx="2" ry="2" />
<text  x="325.59" y="47.5" ></text>
</g>
<g >
<title>pfil_mbuf_out (3,679 samples, 19.52%)</title><rect x="695.5" y="117" width="230.3" height="15.0" fill="rgb(246,156,53)" rx="2" ry="2" />
<text  x="698.47" y="127.5" >pfil_mbuf_out</text>
</g>
<g >
<title>ipf_matchsrcdst (3,120 samples, 16.55%)</title><rect x="730.5" y="37" width="195.3" height="15.0" fill="rgb(236,148,40)" rx="2" ry="2" />
<text  x="733.47" y="47.5" >ipf_matchsrcdst</text>
</g>
<g >
<title>ip6_tryforward (9,569 samples, 50.77%)</title><rect x="64.6" y="101" width="599.1" height="15.0" fill="rgb(248,50,1)" rx="2" ry="2" />
<text  x="67.59" y="111.5" >ip6_tryforward</text>
</g>
<g >
<title>ipf_derefrule (585 samples, 3.10%)</title><rect x="525.9" y="37" width="36.6" height="15.0" fill="rgb(243,1,19)" rx="2" ry="2" />
<text  x="528.87" y="47.5" >ipf..</text>
</g>
<g >
<title>netisr_dispatch_src (4,165 samples, 22.10%)</title><rect x="665.0" y="213" width="260.8" height="15.0" fill="rgb(246,58,6)" rx="2" ry="2" />
<text  x="668.05" y="223.5" >netisr_dispatch_src</text>
</g>
<g >
<title>memcmp (11 samples, 0.06%)</title><rect x="663.7" y="149" width="0.7" height="15.0" fill="rgb(244,145,9)" rx="2" ry="2" />
<text  x="666.67" y="159.5" ></text>
</g>
<g >
<title>ipf_check (3,679 samples, 19.52%)</title><rect x="695.5" y="85" width="230.3" height="15.0" fill="rgb(241,196,19)" rx="2" ry="2" />
<text  x="698.47" y="95.5" >ipf_check</text>
</g>
<g >
<title>ip6_tryforward (1,090 samples, 5.78%)</title><rect x="1121.8" y="165" width="68.2" height="15.0" fill="rgb(254,215,40)" rx="2" ry="2" />
<text  x="1124.76" y="175.5" >ip6_try..</text>
</g>
<g >
<title>ether_demux (10,440 samples, 55.39%)</title><rect x="10.1" y="149" width="653.6" height="15.0" fill="rgb(228,93,35)" rx="2" ry="2" />
<text  x="13.06" y="159.5" >ether_demux</text>
</g>
<g >
<title>iflib_if_transmit (1,090 samples, 5.78%)</title><rect x="1121.8" y="117" width="68.2" height="15.0" fill="rgb(217,156,47)" rx="2" ry="2" />
<text  x="1124.76" y="127.5" >iflib_i..</text>
</g>
<g >
<title>ipf_check (486 samples, 2.58%)</title><rect x="665.0" y="85" width="30.5" height="15.0" fill="rgb(206,167,14)" rx="2" ry="2" />
<text  x="668.05" y="95.5" >ip..</text>
</g>
<g >
<title>iflib_encap (1,090 samples, 5.78%)</title><rect x="1121.8" y="53" width="68.2" height="15.0" fill="rgb(219,190,39)" rx="2" ry="2" />
<text  x="1124.76" y="63.5" >iflib_e..</text>
</g>
<g >
<title>iflib_rxeof (3,130 samples, 16.61%)</title><rect x="925.8" y="229" width="196.0" height="15.0" fill="rgb(234,49,44)" rx="2" ry="2" />
<text  x="928.80" y="239.5" >iflib_rxeof</text>
</g>
<g >
<title>ip6_tryforward (3,130 samples, 16.61%)</title><rect x="925.8" y="117" width="196.0" height="15.0" fill="rgb(249,225,23)" rx="2" ry="2" />
<text  x="928.80" y="127.5" >ip6_tryforward</text>
</g>
<g >
<title>ipf_state_lookup (664 samples, 3.52%)</title><rect x="1080.2" y="37" width="41.6" height="15.0" fill="rgb(220,122,49)" rx="2" ry="2" />
<text  x="1083.19" y="47.5" >ipf..</text>
</g>
<g >
<title>ipf_makefrip (488 samples, 2.59%)</title><rect x="562.5" y="37" width="30.6" height="15.0" fill="rgb(245,135,41)" rx="2" ry="2" />
<text  x="565.50" y="47.5" >ip..</text>
</g>
<g >
<title>ip6_input (10,440 samples, 55.39%)</title><rect x="10.1" y="117" width="653.6" height="15.0" fill="rgb(247,185,1)" rx="2" ry="2" />
<text  x="13.06" y="127.5" >ip6_input</text>
</g>
<g >
<title>netisr_dispatch_src (4,165 samples, 22.10%)</title><rect x="665.0" y="165" width="260.8" height="15.0" fill="rgb(232,113,13)" rx="2" ry="2" />
<text  x="668.05" y="175.5" >netisr_dispatch_src</text>
</g>
<g >
<title>ip6_input (3,130 samples, 16.61%)</title><rect x="925.8" y="133" width="196.0" height="15.0" fill="rgb(251,210,10)" rx="2" ry="2" />
<text  x="928.80" y="143.5" >ip6_input</text>
</g>
<g >
<title>gtaskqueue_run_locked (4,165 samples, 22.10%)</title><rect x="665.0" y="277" width="260.8" height="15.0" fill="rgb(205,125,18)" rx="2" ry="2" />
<text  x="668.05" y="287.5" >gtaskqueue_run_locked</text>
</g>
<g >
<title>lock_delay (6 samples, 0.03%)</title><rect x="664.4" y="117" width="0.4" height="15.0" fill="rgb(253,189,36)" rx="2" ry="2" />
<text  x="667.42" y="127.5" ></text>
</g>
<g >
<title>ether_output (1,090 samples, 5.78%)</title><rect x="1121.8" y="149" width="68.2" height="15.0" fill="rgb(248,2,19)" rx="2" ry="2" />
<text  x="1124.76" y="159.5" >ether_o..</text>
</g>
<g >
<title>ether_demux (4,165 samples, 22.10%)</title><rect x="665.0" y="181" width="260.8" height="15.0" fill="rgb(222,210,14)" rx="2" ry="2" />
<text  x="668.05" y="191.5" >ether_demux</text>
</g>
<g >
<title>iflib_rxeof (1,090 samples, 5.78%)</title><rect x="1121.8" y="277" width="68.2" height="15.0" fill="rgb(244,37,32)" rx="2" ry="2" />
<text  x="1124.76" y="287.5" >iflib_r..</text>
</g>
<g >
<title>netisr_dispatch_src (1,090 samples, 5.78%)</title><rect x="1121.8" y="245" width="68.2" height="15.0" fill="rgb(224,211,35)" rx="2" ry="2" />
<text  x="1124.76" y="255.5" >netisr_..</text>
</g>
<g >
<title>lock_delay (768 samples, 4.07%)</title><rect x="955.0" y="37" width="48.1" height="15.0" fill="rgb(228,4,7)" rx="2" ry="2" />
<text  x="957.98" y="47.5" >lock..</text>
</g>
<g >
<title>ixl_isc_txd_encap (1,090 samples, 5.78%)</title><rect x="1121.8" y="37" width="68.2" height="15.0" fill="rgb(214,214,5)" rx="2" ry="2" />
<text  x="1124.76" y="47.5" >ixl_isc..</text>
</g>
<g >
<title>__rw_rlock_int (5 samples, 0.03%)</title><rect x="1036.9" y="37" width="0.3" height="15.0" fill="rgb(252,32,39)" rx="2" ry="2" />
<text  x="1039.87" y="47.5" ></text>
</g>
<g >
<title>ether_input (1,090 samples, 5.78%)</title><rect x="1121.8" y="261" width="68.2" height="15.0" fill="rgb(229,145,32)" rx="2" ry="2" />
<text  x="1124.76" y="271.5" >ether_i..</text>
</g>
<g >
<title>ipf_check (3,130 samples, 16.61%)</title><rect x="925.8" y="69" width="196.0" height="15.0" fill="rgb(253,161,41)" rx="2" ry="2" />
<text  x="928.80" y="79.5" >ipf_check</text>
</g>
<g >
<title>ipf_check_wrapper6 (3,130 samples, 16.61%)</title><rect x="925.8" y="85" width="196.0" height="15.0" fill="rgb(224,154,50)" rx="2" ry="2" />
<text  x="928.80" y="95.5" >ipf_check_wrapper6</text>
</g>
<g >
<title>ipf_checkl4sum (486 samples, 2.58%)</title><rect x="665.0" y="37" width="30.5" height="15.0" fill="rgb(228,61,48)" rx="2" ry="2" />
<text  x="668.05" y="47.5" >ip..</text>
</g>
<g >
<title>ether_input (3,130 samples, 16.61%)</title><rect x="925.8" y="213" width="196.0" height="15.0" fill="rgb(210,196,26)" rx="2" ry="2" />
<text  x="928.80" y="223.5" >ether_input</text>
</g>
<g >
<title>zone_import (10 samples, 0.05%)</title><rect x="664.4" y="149" width="0.6" height="15.0" fill="rgb(220,214,29)" rx="2" ry="2" />
<text  x="667.36" y="159.5" ></text>
</g>
<g >
<title>ipf_checkv6sum (486 samples, 2.58%)</title><rect x="665.0" y="53" width="30.5" height="15.0" fill="rgb(214,229,19)" rx="2" ry="2" />
<text  x="668.05" y="63.5" >ip..</text>
</g>
<g >
<title>nd6_resolve (2 samples, 0.01%)</title><rect x="145.5" y="69" width="0.2" height="15.0" fill="rgb(230,101,12)" rx="2" ry="2" />
<text  x="148.54" y="79.5" ></text>
</g>
<g >
<title>pfil_mbuf_in (3,548 samples, 18.82%)</title><rect x="146.0" y="85" width="222.2" height="15.0" fill="rgb(219,225,12)" rx="2" ry="2" />
<text  x="149.04" y="95.5" >pfil_mbuf_in</text>
</g>
<g >
<title>lock_delay (334 samples, 1.77%)</title><rect x="1016.0" y="37" width="20.9" height="15.0" fill="rgb(220,154,24)" rx="2" ry="2" />
<text  x="1018.96" y="47.5" ></text>
</g>
<g >
<title>keg_alloc_slab (9 samples, 0.05%)</title><rect x="664.4" y="133" width="0.5" height="15.0" fill="rgb(243,143,32)" rx="2" ry="2" />
<text  x="667.36" y="143.5" ></text>
</g>
<g >
<title>cache_alloc (10 samples, 0.05%)</title><rect x="664.4" y="165" width="0.6" height="15.0" fill="rgb(224,209,31)" rx="2" ry="2" />
<text  x="667.36" y="175.5" ></text>
</g>
<g >
<title>ifmp_ring_enqueue (1,090 samples, 5.78%)</title><rect x="1121.8" y="101" width="68.2" height="15.0" fill="rgb(247,202,39)" rx="2" ry="2" />
<text  x="1124.76" y="111.5" >ifmp_ri..</text>
</g>
<g >
<title>_rw_runlock_cookie_int (191 samples, 1.01%)</title><rect x="718.5" y="37" width="12.0" height="15.0" fill="rgb(206,128,3)" rx="2" ry="2" />
<text  x="721.51" y="47.5" ></text>
</g>
<g >
<title>netisr_dispatch_src (10,440 samples, 55.39%)</title><rect x="10.1" y="133" width="653.6" height="15.0" fill="rgb(241,217,48)" rx="2" ry="2" />
<text  x="13.06" y="143.5" >netisr_dispatch_src</text>
</g>
<g >
<title>iflib_fl_refill (10 samples, 0.05%)</title><rect x="664.4" y="197" width="0.6" height="15.0" fill="rgb(239,110,11)" rx="2" ry="2" />
<text  x="667.36" y="207.5" ></text>
</g>
<g >
<title>ether_output (2 samples, 0.01%)</title><rect x="145.5" y="85" width="0.2" height="15.0" fill="rgb(221,56,11)" rx="2" ry="2" />
<text  x="148.54" y="95.5" ></text>
</g>
<g >
<title>ipf_check_wrapper6 (3,548 samples, 18.82%)</title><rect x="146.0" y="69" width="222.2" height="15.0" fill="rgb(248,210,23)" rx="2" ry="2" />
<text  x="149.04" y="79.5" >ipf_check_wrapper6</text>
</g>
<g >
<title>_task_fn_rx (4,165 samples, 22.10%)</title><rect x="665.0" y="261" width="260.8" height="15.0" fill="rgb(221,195,1)" rx="2" ry="2" />
<text  x="668.05" y="271.5" >_task_fn_rx</text>
</g>
<g >
<title>memset_erms (423 samples, 2.24%)</title><rect x="341.7" y="37" width="26.5" height="15.0" fill="rgb(214,154,13)" rx="2" ry="2" />
<text  x="344.69" y="47.5" >m..</text>
</g>
<g >
<title>gtaskqueue_thread_loop (3,130 samples, 16.61%)</title><rect x="925.8" y="277" width="196.0" height="15.0" fill="rgb(207,102,40)" rx="2" ry="2" />
<text  x="928.80" y="287.5" >gtaskqueue_thread_loop</text>
</g>
<g >
<title>gtaskqueue_run_locked (10,461 samples, 55.50%)</title><rect x="10.1" y="245" width="654.9" height="15.0" fill="rgb(243,123,25)" rx="2" ry="2" />
<text  x="13.06" y="255.5" >gtaskqueue_run_locked</text>
</g>
<g >
<title>_rw_runlock_cookie_int (181 samples, 0.96%)</title><rect x="1068.9" y="37" width="11.3" height="15.0" fill="rgb(252,176,30)" rx="2" ry="2" />
<text  x="1071.86" y="47.5" ></text>
</g>
<g >
<title>lock_delay (16 samples, 0.08%)</title><rect x="925.8" y="37" width="1.0" height="15.0" fill="rgb(226,220,44)" rx="2" ry="2" />
<text  x="928.80" y="47.5" ></text>
</g>
<g >
<title>__rw_rlock_int (374 samples, 1.98%)</title><rect x="470.3" y="37" width="23.4" height="15.0" fill="rgb(236,113,3)" rx="2" ry="2" />
<text  x="473.28" y="47.5" >_..</text>
</g>
<g >
<title>memset_erms (10 samples, 0.05%)</title><rect x="663.0" y="37" width="0.7" height="15.0" fill="rgb(248,86,32)" rx="2" ry="2" />
<text  x="666.04" y="47.5" ></text>
</g>
<g >
<title>ipf_state_add (35 samples, 0.19%)</title><rect x="697.9" y="69" width="2.2" height="15.0" fill="rgb(214,171,41)" rx="2" ry="2" />
<text  x="700.92" y="79.5" ></text>
</g>
<g >
<title>__rw_rlock_int (294 samples, 1.56%)</title><rect x="700.1" y="37" width="18.4" height="15.0" fill="rgb(221,11,13)" rx="2" ry="2" />
<text  x="703.11" y="47.5" ></text>
</g>
<g >
<title>ipf_state_check (3,605 samples, 19.13%)</title><rect x="700.1" y="69" width="225.7" height="15.0" fill="rgb(240,5,46)" rx="2" ry="2" />
<text  x="703.11" y="79.5" >ipf_state_check</text>
</g>
<g >
<title>ipf_state_check (845 samples, 4.48%)</title><rect x="1068.9" y="53" width="52.9" height="15.0" fill="rgb(209,179,8)" rx="2" ry="2" />
<text  x="1071.86" y="63.5" >ipf_s..</text>
</g>
<g >
<title>ip6_input (1,090 samples, 5.78%)</title><rect x="1121.8" y="181" width="68.2" height="15.0" fill="rgb(251,217,25)" rx="2" ry="2" />
<text  x="1124.76" y="191.5" >ip6_input</text>
</g>
<g >
<title>ipf_derefrule (21 samples, 0.11%)</title><rect x="695.5" y="69" width="1.3" height="15.0" fill="rgb(243,59,53)" rx="2" ry="2" />
<text  x="698.47" y="79.5" ></text>
</g>
</g>
</svg>
